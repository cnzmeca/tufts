/*
* Christian Zinck and Phong Hoang
* Assignment 6: UM
* 4/12/18
*
* Main file for the UM project
*/

#include "segment.h"
#include "operations.h"

#include <assert.h>
#include <seq.h>

#include <stdlib.h>
#include <stdio.h>

typedef struct UM {
        Seq_T mem;
        Seq_T unused_ids;
        uint32_t *registers;
        uint32_t prog_count;
} *UM;

/*
 * new_UM
 * Paremeters: void
 * Return: UM
 *
 * Returns a new UM.
 */
UM new_UM(void)
{
        UM ret = malloc(sizeof(*ret));
        ret->mem = Seq_new(0);
        assert(ret->mem);
        ret->unused_ids = Seq_new(0);
        assert(ret->unused_ids);
        ret->registers = calloc(8, sizeof(uint32_t));
        assert(ret->registers);
        ret->prog_count = 0;
        return ret;
}

/*
 * free_UM
 * Paremeters: UM *um
 * Return: void
 *
 * Frees all memory associated with um.
 */
void free_UM(UM *um)
{
        Seq_T mem = (*um)->mem;
        Seq_T unused_ids = (*um)->unused_ids;

	int len = Seq_length(mem);
        for (int i = 0; i < len; ++i) {
                Segment temp = Seq_get(mem, i);
                if (temp != NULL) {
                        Segment_free(&temp);
                }
        }
        Seq_free(&mem);
        Seq_free(&unused_ids);
        free((*um)->registers);
        free(*um);
}

/*
 * load_UM_Data
 * Paremeters: Um um, char *fname
 * Return: void
 *
 * Loads words stored in file with name fname and puts them in segment 0 of um.
 */
void load_UM_Data(UM um, char *fname)
{
        // Opens file to get size in words
        FILE *fp = fopen(fname, "rb");
        assert(fp);
        int c;
        uint32_t size = 0, zero = 0;
        while ((c = fgetc(fp)) != EOF) {
                ++size;
        }
        size = size / 4;
        fclose(fp);

        // Opens file and stores all words in segment 0
        fp = fopen(fname, "rb");
        assert(fp);
        Segment_map(um->mem, um->unused_ids, &zero, &size);
        for (uint32_t i = 0; i < size; ++i) {
                // Assembles word from separate bytes
                uint32_t word = 0;
                for (int j = 3; j >= 0; --j) {
                        c = fgetc(fp);
                        word += (c << (j * 8));
                }
                Segment_store(um->mem, &zero, &i, &word);
        }
        fclose(fp);     
}

/*
 * run_op
 * Parameters: UM um, short op, uint32_t *a, uint32_t *b, uint32_t *c, int val
 * Return: void
 *
 * Calls the function represented by op and passes um, a, b, c, and val as
 * parameters to it as necessary.
 */
void run_op(UM um, short op, uint32_t *a, uint32_t *b, uint32_t *c, int val)
{
        switch(op) {
                case 0:
                        cond_move(a, b, c);
                        break;
                case 1:
                        Segment_load(um->mem, a, b, c);
                        break;
                case 2:
                        
                        Segment_store(um->mem, a, b, c);
                        break;
                case 3:
                        add(a, b, c);
                        break;
                case 4:
                        multiply(a, b, c);
                        break;
                case 5:
                        divide(a, b, c);
                        break;
                case 6:
                        nand(a, b, c);
                        break;
                case 7:
      			free_UM(&um);
                        exit(EXIT_SUCCESS);
                        break;
                case 8:
                        Segment_map(um->mem, um->unused_ids, b, c);
                        break;
                case 9:
                        Segment_unmap(um->mem, um->unused_ids, c);
                        break;
                case 10:
                        output(c);
                        break;
                case 11:
                        input(c);
                        break;
                case 12:
                        um->prog_count = Segment_move(um->mem, um->unused_ids,
                                         b, c);
                  	break;
                case 13:
                        load_val(a, val);
                        break;
        }
}

int main(int argc, char *argv[])

{
        if (argc != 2) {
                fprintf(stderr, "Invalid call. Use './um [filename]'\n");
                exit(EXIT_FAILURE);
        }
        UM um = new_UM();

        load_UM_Data(um, argv[1]);

	uint32_t word = 0;
        uint32_t zero = 0;
	uint32_t op_lsb = 28;
        uint32_t a_lsb = 6;
        uint32_t b_lsb = 3;
        uint32_t val_len = 25;
	uint32_t reg_size = 3;
        uint32_t lv_op = 13;

	uint32_t op_mask = ~zero << op_lsb;
	uint32_t a_mask = ~(~zero << reg_size) << a_lsb;
	uint32_t a_lv_mask = ~(~zero << reg_size) << val_len;
	uint32_t b_mask = ~(~zero << reg_size) << b_lsb;
	uint32_t c_mask = ~(~zero << reg_size);
	uint32_t val_mask = ~(~zero << val_len);
	
        uint32_t op, val, a, b, c;
        uint32_t *regs = um->registers;
	uint32_t *pc = &(um->prog_count);

        while (1) {
                Segment_load(um->mem, &word, &zero, pc); 
                ++(*pc);
                
		fprintf(stderr, "%x\n", word);
                op = (word & op_mask) >> op_lsb;
        
                // Special case for load_val
                if (op == lv_op) {
                        a = (word & a_lv_mask) >> val_len;
                        val = word & val_mask;
                // Other cases
                } else {
                        a = (word & a_mask) >> a_lsb;
                        b = (word & b_mask) >> b_lsb;
                        c = word & c_mask;
                }
                
                run_op(um, op, regs + a, regs + b, regs + c, val);
        }       
        exit(EXIT_SUCCESS);
}

(check-principal-type #t bool)
(check-principal-type 7 int)
(check-principal-type 'a sym)
(check-principal-type '() (forall ('a) (list 'a)))
(check-principal-type '(1 2 3) (list int))

(check-type-error (+ 1 #t))

(check-principal-type (if #t 1 2) int)
(check-type-error (if #t 1 #f))
(check-type-error (if 1 1 1))

(check-principal-type (begin) unit)
(check-principal-type (begin 1 2 3) int)
(check-principal-type (begin 1 2 #t) bool)

(check-principal-type (lambda (x y) (cons x y))
	(forall ('a) ('a (list 'a) -> (list 'a))))
(check-type-error (lambda (x) (cons x x)))
(check-type-error (lambda (x y z) (cons x y z)))
(check-type-error (lambda (x) (cons x x)))

(check-principal-type (let ((x 1)) x) int)
(check-type-error (let ((x 1) (y #t)) (x + y)))


(check-principal-type (letrec ((x 1)) x) int)

(* Generated by smlnatural.lua.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Natural : NATURAL) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Natural
    
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  val intString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 0 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
in  test
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 0 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
in  test
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 336 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
in  test
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "336"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 31599392521 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
in  test
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "31599392521"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 431887675985371012859 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
in  test
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "431887675985371012859"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a Natural with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 292 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (292), N./*/ (N.ofInt (1000), N.ofInt (0)))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "292"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 238331627195522982 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./*/ (N./*/ (N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (384), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (78), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (881), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (0), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (704), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N./+/ (N./+/ (N.ofInt (461), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (686), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (342), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (26), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N./+/ (N.ofInt (145), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (278), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (34), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (36), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "238331627195522982"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 100731132221374926239712 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./*/ (N./+/ (N.ofInt (608), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (33), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (156), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N./+/ (N.ofInt (338), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (907), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (45), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (327), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (406), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (651), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (529), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))), N./+/ (N.ofInt (360), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (651), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (102), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "100731132221374926239712"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 449 - 45 = 404 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (449), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (45), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "404"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 925637 - 693767 = 231870 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (637), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (925), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (767), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (693), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "231870"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 983634253858 - 380459640094 = 603174613764 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (858), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (253), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (634), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (983), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (94), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (640), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (459), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (380), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "603174613764"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 545 = 170 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (545), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (170), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 425 = 555 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (425), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (555), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 901901 = 247917 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (917), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (247), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 506 != 734 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (506), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (734), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 643 != 340 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (643), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (340), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 929355 != 534421 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (355), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (929), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (421), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (534), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 890 < 890 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (890), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (890), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 930 < 270 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (930), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (270), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 894999 < 190694 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (999), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (894), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (694), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (190), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 663 > 17 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (663), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (17), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 663 > 194 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (663), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (194), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 315638 > 394378 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (638), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (315), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (378), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (394), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 482 <= 744 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (482), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (744), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 647 <= 360 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (647), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (360), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 245233 <= 55319 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (245), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (319), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (55), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 371 >= 210 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (371), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (210), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 209 >= 186 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (209), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (186), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 31503 >= 103922 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (503), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (31), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (922), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (103), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 615 = 615 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (615), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (615), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 19 = 19 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (19), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (19), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 725260 = 725260 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (260), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (725), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (260), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (725), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 963 != 963 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (963), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (963), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 776 != 776 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (776), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (776), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 962326 != 962326 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (326), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (326), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 184 < 184 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (184), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (184), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 72 < 72 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (72), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (72), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 473481 < 473481 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (481), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (473), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (481), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (473), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 253 > 253 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (253), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (253), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 665 > 665 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (665), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (665), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 141449 > 141449 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (449), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (141), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (449), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (141), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 781 <= 781 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (781), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (781), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 265 <= 265 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (265), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (265), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 520287 <= 520287 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (287), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (520), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (287), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (520), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 551 >= 551 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (551), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (551), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 826 >= 826 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (826), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (826), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 132089 >= 132089 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (132), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (132), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 7076 = 590 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (76), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (7), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (590), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 378693 = 777 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (693), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (378), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (777), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 570954898414198155 = 974 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (155), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (198), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (898), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (954), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (570), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (974), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 33793 != 14 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (793), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (33), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 278539 != 721 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (539), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (278), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (721), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 75505854423614581 != 875 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (581), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (614), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (423), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (854), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (505), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (75), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (875), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 236874 < 836 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (874), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (236), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (836), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 179704 < 571 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (704), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (179), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (571), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 275133835923297696 < 347 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (696), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (297), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (923), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (835), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (133), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (275), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (347), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 640849 > 89 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (849), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (640), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 420943 > 927 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (943), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (420), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (927), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 565321910128318012 > 30 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (12), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (128), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (910), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (321), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (565), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (30), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 519483 <= 206 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (483), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (519), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (206), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 55392 <= 129 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (392), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (55), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (129), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 977497372910455783 <= 921 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (783), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (455), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (910), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (372), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (497), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (977), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 481196 >= 63 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (196), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (481), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 908872 >= 552 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (872), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (908), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 22340284741333518 >= 571 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (333), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (741), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (284), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (340), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (22), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (571), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 399 div 8 = 49 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (399), N./*/ (N.ofInt (1000), N.ofInt (0))), 8)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "49"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 522086 div 3 = 174028 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (86), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (522), N./*/ (N.ofInt (1000), N.ofInt (0))))), 3)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "174028"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 575928284111 div 4 = 143982071027 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (111), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (284), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (928), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (575), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 4)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "143982071027"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 732 div 10 = 73 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N.ofInt (0))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "73"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 216876 div 10 = 21687 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (876), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (216), N./*/ (N.ofInt (1000), N.ofInt (0))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "21687"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 852917726655 div 10 = 85291772665 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (655), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (726), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (917), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (852), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "85291772665"
        

   in 
      Unit.report()
   end

end

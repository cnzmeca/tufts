(* Generated by smlnatural.lua.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Bignum : BIGNUM) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Bignum
    val /+/ = <+>   val /-/ = <->   val /*/ = <*>
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = N.toString
  val intString = N.toString
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 4 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
in  test
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "4"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 6 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
in  test
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "6"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 356 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
in  test
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "356"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 4171357043 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
in  test
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "4171357043"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 361079935212700468920 using only 1, 0, and +"
                                (fn () => (natString (let val test = N.ofInt (0)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (N.ofInt (1), test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
    val test = N./+/ (test, test)
in  test
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "361079935212700468920"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a LargeInteger with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 72212032 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./+/ (N.ofInt (137), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N./+/ (N.ofInt (86), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (705), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./*/ (N./+/ (N./+/ (N.ofInt (234), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (102), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (602), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (357), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "72212032"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 797303783524829024 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./+/ (N./+/ (N.ofInt (387), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (668), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (841), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (169), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (92), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (686), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (963), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (994), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./*/ (N./+/ (N./+/ (N.ofInt (378), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (332), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (751), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (839), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (100), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (746), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (698), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (911), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "797303783524829024"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 44359241542839721268443 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./+/ (N./+/ (N.ofInt (241), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (884), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (771), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (797), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (896), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (957), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (852), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N.ofInt (124), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (252), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (154), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (636), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N./+/ (N./+/ (N.ofInt (298), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (484), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (531), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (447), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (775), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (525), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (578), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (492), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (756), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (569), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (403), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (383), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (618), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (561), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (698), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (115), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "44359241542839721268443"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 275 - 310 = -35 "
                                (fn () => (intString (N./-/ (N./+/ (N.ofInt (275), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (310), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-35"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -942241 - -679695 = -262546 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (241), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (942), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (695), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (679), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-262546"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -646127385747 - 824951288978 = -1471078674725 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (747), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (385), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (127), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (646), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N.ofInt (978), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (288), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (951), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (824), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-1471078674725"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 37027 using literals, *, and +"
                                (fn () => (natString (N./-/ (N.negated (N./-/ (N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (46), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./*/ (N./+/ (N.ofInt (273), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (136), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "37027"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -384704816005 using literals, *, and +"
                                (fn () => (intString (N./+/ (N./-/ (N./*/ (N./+/ (N.ofInt (853), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (161), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (206), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (440), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (971), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (354), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (194), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (926), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N.negated (N./*/ (N./+/ (N.ofInt (653), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (944), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (633), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (134), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-384704816005"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 779740554058179953317994275634016341849223201 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./-/ (N./+/ (N.ofInt (950), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (689), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (658), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (707), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./-/ (N./+/ (N.ofInt (234), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (874), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (488), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (10), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (645), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (892), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (14), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (681), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))), N./*/ (N./*/ (N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (797), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (993), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (78), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (403), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (788), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (700), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (990), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (67), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (917), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (792), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (402), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (149), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (418), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (127), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "779740554058179953317994275634016341849223201"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 199 = 993 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (199), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (993), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 735 = -405 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (735), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (405), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 830800 = 995140 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (800), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (830), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (140), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (995), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -571 != 758 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (571), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (758), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -55 != 458 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (55), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (458), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 507539 != 64130 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (539), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (507), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (64), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -331 < -148 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (331), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (148), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -247 < 814 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (247), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (814), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -738846 < 730158 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (846), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (738), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (158), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (730), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -311 > 97 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (311), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 591 > 226 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (591), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (226), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -740515 > 426954 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (515), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (740), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (954), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (426), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 663 <= -155 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (663), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (155), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 660 <= 558 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (660), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (558), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 889264 <= 698228 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (264), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (889), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (228), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (698), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 719 >= -287 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (719), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (287), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 205 >= -283 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (205), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (283), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 17530 >= -389252 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (530), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (17), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (252), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (389), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 751 = 751 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (751), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (751), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -798 = -798 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -495149 = -495149 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (149), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (495), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (149), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (495), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 549 != 549 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (549), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (549), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -186 != -186 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (186), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (186), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 270827 != 270827 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (827), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (270), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (827), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (270), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 865 < 865 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (865), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (865), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -801 < -801 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 172921 < 172921 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (172), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (172), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 230 > 230 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (230), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (230), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 157 > 157 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (157), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (157), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 187491 > 187491 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (491), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (187), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (491), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (187), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -612 <= -612 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (612), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (612), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 238 <= 238 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (238), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (238), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 651896 <= 651896 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (896), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (651), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (896), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (651), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -26 >= -26 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (26), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (26), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -207 >= -207 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (207), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (207), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 216740 >= 216740 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (740), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (216), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (740), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (216), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 488909 = -719 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (909), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (488), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (719), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -417001 = -420 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (1), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (420), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -137836297347923101 = 147 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (101), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (923), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (347), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (297), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (836), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (137), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -47305 != -506 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (305), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (47), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (506), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 978643 != -278 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (643), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (978), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (278), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 56016021916249517 != -63 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (517), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (249), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (916), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (21), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (16), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (56), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N.negated (N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -945614 < -301 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (614), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (945), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (301), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -666369 < 89 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (369), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (666), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -444258617074152924 < 628 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (924), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (152), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (74), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (617), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (258), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (444), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (628), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 274340 > -82 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (340), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (274), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (82), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -662870 > -511 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (870), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (662), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (511), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 48881921722701172 > -552 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (172), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (701), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (722), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (881), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (48), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N.negated (N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -389263 <= 739 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (263), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (389), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (739), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -382382 <= 458 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (382), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (382), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (458), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -872453559723619650 <= 495 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (650), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (619), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (723), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (559), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (453), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (872), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (495), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 272746 >= -249 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (746), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (272), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (249), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 558552 >= 324 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (558), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (324), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 213044219973445847 >= -91 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (847), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (445), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (973), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (219), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (44), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (213), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N.negated (N./+/ (N.ofInt (91), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
        

   in 
      Unit.report()
   end

end
